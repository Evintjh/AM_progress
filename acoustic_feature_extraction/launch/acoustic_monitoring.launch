<launch>
  <!-- parameter definition -->

  <!-- arecord -l will show available input devices, use the car number as
  the first number and the subdevice number as the second in a string
  like hw:1,0 -->
  <arg name="device" default="hw:0,0" />
  <arg name="output"      default="screen"/>
  <arg name="bitrate" default="128"/>
  <arg name="channels" default="1"/>
  <arg name="sample_rate" default="44100"/>
  <arg name="format" default="wave"/>
  <arg name="sample_format" default="S16LE"/>
  <arg name="ns" default=""/>
  <arg name="audio_topic" default="/audio"/>
  <arg name="plotjuggler_viz" default="true"/>
 

  <!-- publish audio data as wav format (raw signal) to a topic -->
  <!-- <group ns="$(arg ns)"> -->
  <node name="audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
    <param name="depth" value="16" />
    <param name="device" value="$(arg device)" />
    <!-- <param name="bitrate" value="$(arg bitrate)"/> -->
    <param name="channels" value="$(arg channels)"/>
    <param name="sample_rate" value="$(arg sample_rate)"/>
    <param name="sample_format" value="$(arg sample_format)"/>
    <param name="format" value="$(arg format)"/>
  </node>
  <!-- </group> -->

  <!-- convert the raw signal to msg with header stamps -->
  <node name="audio_converter" pkg="audio_capture_convert" type="converter_node.py" output="$(arg output)">
    <remap from="audio" to="$(arg audio_topic)" />
  </node>

  <!-- noise filtering node, based on frequnecy  -->
  <node name="audio_filter" pkg="acoustic_feature_extraction" type="main_filters2.py" output="$(arg output)" /> 

  <node name="acoustic_signatures" pkg="acoustic_feature_extraction" type="acoustic_feature_extraction.py"/>


  <!-- data visualisation  -->
  <node name="plot_acoustic_signature" pkg="plotjuggler" type="plotjuggler" if="$(arg plotjuggler_viz)"/>

</launch>
